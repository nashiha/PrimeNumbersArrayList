/*--------------------------------------------------
 * Lab 01: PrimeNumbers: allows a variable sized collection of non-negative integer values to be stored
 * @author: Nashiha Ahmed
 * @version: 1; 15/ 02/ 15
 */

public static void main( String[] args)
{
    //variables
    int[] prime;
    int i;
    int j;
    
    //code
    //1. Create prime array
    prime = new IntBag();
    
    //2. Find the first 100 prime numbers and add them to list
    while( prime.length <= 100)
    {
        for( j = 0; j < valid; j++)
        {
            if( i % prime[j] == 0)
                prime.addAtEnd(i);
        }
        i++;
    }
    
    //3. Print array
    prime.toString();
    

package myBag;

/*--------------------------------------------------
 * Lab 01: IntBag: allows a variable sized collection of non-negative integer values to be stored
 * @author: Nashiha Ahmed
 * @version: 1; 15/ 02/ 15
 */

public class IntBag
{
    //constants 
    private final int SENTINEL = -1;
    
    //properties
    private int[] bag;
    private int valid;
    
    //constructors
    //constructor1
    public IntBag()
    {
        bag = new int[ 100];
        valid = 0;
    }
    
    //constructor2
    public IntBag( int maxValues)
    {
        bag = new int[ maxValues];
        valid = 0;
    }
    
    //methods
    //addAtEnd method: Adds given value at the end of valid part of the array
    public void addAtEnd( int value)
    {
        if( value != SENTINEL)
        {
            bag[ valid] = value;
            valid++;
        }
    }
    
    //addAtIndex Method: Adds given value at the given index
    public void addAtIndex( int value, int index)
    {
        if( value != SENTINEL && index < valid)
        {
            valid++;
            
            //1. Create a copy of old array
            int[] copy;
            copy = new int[ bag.length];
            for( int i = 0; i < bag.length; i++)
                copy[ i] = bag[ i];
            
            //2. Use old array to make new array with given value at given index, shifting the next numbers up
            for( int i = index; i < (valid - 1); i++)
            {
                bag[ i + 1 ] = copy[ i];
            }
            bag[ index] = value;
        }
        
        //3. Use addAtEnd method if given index adds value to the end
        else if( index == valid)
        {
            addAtEnd( value);
        }
        
        //4. Give error message if index is more than valid
        else if( index > valid)
        {
            System.out.println( "Value is not within bounds.");
        }
    }
    
    //Contains method: checks if given value is in array and returns true/false
    public boolean contains( int value)
    {
        for( int i = 0; i < valid; i++)
        {
            if( bag[i] == value)
            {
                return true;
            }
        }
        return false;
    }
    
    //remove method: removes the value at the given index
    public void remove( int index)
    {
        if( index <= valid)
        {
            valid--;
            //1. Create a copy of old array
            int[] copy;
            copy = new int[ bag.length];
            for( int i = 0; i < bag.length; i++)
                copy[ i] = bag[ i];
            
            //2. Use old array to make new array with value removed at given index and previous numbers shifted down
            for( int i = index; i < (valid); i++)
            {
                bag[ i] = copy[ i + 1];
            }
        }
        //3. Give error message if index is greater than bounds
        else if( index > valid)
        {
            System.out.println( "No number exists at this index");
        }
    }
    
    //Size method: gets size of array
    public int size()
    {
        return valid;
    }
    
    //toString method: prints array
    public String toString()
    {
        String print;
        print = "";
        print = "My Array: " + "[ ";
        for( int i = 0; i < valid; i++)
        {
            print = print + bag[i] + ", ";
        }
        print = print + "]";
        return print;
    }
    
    //Get method: gets value at given index
    public int get( int index)
    {
        int number;
        number = bag[ index];
        return number;
    }
    
    //end of code
}
//end of IntBag